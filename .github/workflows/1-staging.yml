#  ┌────────────────────────────────────────────────────────────────────────────────────┐
#  │ Purpose:                                                                           │
#  │ - Triggers workflow for deployment to staging                                      │
#  │ - Send a message on PR - to confirm deployment to user                             │
#  └────────────────────────────────────────────────────────────────────────────────────┘
name: 1 - Deploy Staging

# Enforces Staging branch = staging env
on:
  workflow_dispatch: # manual run fallback
  push:
    branches:
      - staging

# Permissions to write on PR
permissions: write-all

jobs:
  create-release-pr:
    name: Create Release PR (conditional)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches

      - name: Check for Release PR
        id: check-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define
          EXISTS=$(gh pr list --base main --head staging --state open --json number --jq 'length')
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT

          # Determine
          if [ "$EXISTS" != "0" ]; then
            echo "::notice::Release PR already exists. Skipping creation."
          else
            echo "::notice::No Release PR exists. Creating one now."
          fi

      - name: Grab info for Release PR
        if: steps.check-pr.outputs.exists == '0'
        id: get-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get latest merged PR from staging
          PR_DATA=$(gh pr list --base staging --state merged --limit 1 --json number,title,body,author --jq '.[0]')

          # Extract PR info
          title=$(echo "$PR_DATA" | jq -r '.title')
          body=$(echo "$PR_DATA" | jq -r '.body')
          author=$(echo "$PR_DATA" | jq -r '.author.login')

          # Set outputs for the next step - w/ multiline support
          {
            echo "title<<EOF"
            echo "$title"
            echo "EOF"

            echo "body<<EOF"
            echo "$body"
            echo "EOF"

            echo "author<<EOF"
            echo "$author"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release PR
        if: steps.check-pr.outputs.exists == '0'
        uses: devops-infra/action-pull-request@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: staging
          target_branch: main
          title: ${{ steps.get-pr.outputs.title }}
          body: |
            ## Release PR

            This PR releases changes from staging to production.

            ### Original PR Details:
            ${{ steps.get-pr.outputs.body }}
          label: release
          assignee: ${{ steps.get-pr.outputs.author }}

  build:
    name: Build Staging
    needs: create-release-pr
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true

      # ┌────────────────────────────────────────────────────────────────────────────────────┐
      # │ Setup Deps                                                                         │
      # └────────────────────────────────────────────────────────────────────────────────────┘
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@master

      - name: Cache Devbox store
        uses: actions/cache@main
        with:
          path: ~/.cache/devbox
          key: devbox-${{ hashFiles('devbox.lock') }}
          restore-keys: |
            devbox-

      - name: Install Devbox
        uses: jetpack-io/devbox-install-action@main
        with:
          enable-cache: true

      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.STG_DOPPLER_TOKEN }}
          inject-env-vars: true

      - name: Set versioning - via PR number
        id: version
        env:
          DOPPLER_TOKEN: ${{ secrets.STG_DOPPLER_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the PR Number
          PR_NUM=$(gh pr view --json number -q .number)

          if [ -z "$PR_NUM" ]; then
            echo "ERROR: PR number for this commit is null. See Logs."
            exit 1
          fi

          # Set the version
          export semantic_version=pr-$PR_NUM

          # Update version on Doppler
          doppler secrets set SEMANTIC_VERSION=$semantic_version

          # pass var to other steps
          echo "semantic_version=pr-$PR_NUM" >> $GITHUB_OUTPUT

      - name: Confirm new release (fail-catch)
        if: steps.version.outputs.semantic_version == '' # null
        uses: actions/github-script@main
        with:
          script: |
            core.setFailed("Semantic version is null. See logs.")

      # ┌─────────────────────────────────────────────────────────────────────────────┐
      # │       Build/push images                                                     │
      # └─────────────────────────────────────────────────────────────────────────────┘
      - name: Backend - Build & Push image
        env:
          BUILD_ENV: stg
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/note-app-backend
          IMAGE_TAG: ${{ steps.version.outputs.semantic_version }} # Since it was changed post-fetch
        run: |
          devbox run build_push
          echo '✅ Backend image built and pushed'

      - name: Frontend - Build & Push image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/note-app-frontend
          IMAGE_TAG: ${{ steps.version.outputs.semantic_version }} # Since it was changed post-fetch
          REPO: ghcr.io/${{ github.repository }}
        run: |
          devbox run build_push
          echo '✅ Frontend image built and pushed'

  deploy:
    name: Deploy Staging
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    steps:
      # ┌─────────────────────────────────────────────────────────────────────────────┐
      # │       Setup deps                                                            │
      # └─────────────────────────────────────────────────────────────────────────────┘
      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.STG_DOPPLER_TOKEN }}
          inject-env-vars: true

      - name: Checkout Helm Chart
        uses: actions/checkout@main
        with:
          repository: jomakori/gke_GitOps
          token: ${{ steps.doppler.outputs.GITOPS_GH_TOKEN }}

      - name: Cache Devbox store
        uses: actions/cache@main
        with:
          path: ~/.cache/devbox
          key: devbox-${{ hashFiles('devbox.lock') }}
          restore-keys: |
            devbox-

      - name: Install Devbox
        uses: jetpack-io/devbox-install-action@main
        with:
          enable-cache: true

      - name: Deploy Staging
        env:
          CONTAINER_TAG: ${{ steps.doppler.outputs.SEMANTIC_VERSION }} #retrieved from build step
          ENV_NUM: 0 # staging env
        run: |
          GIT_MESSAGE="deploy(notes-app): Test changes in staging: $CONTAINER_TAG"
          export GIT_MESSAGE
          devbox run deploy

  comment-pr:
    name: Comment on PR
    environment: staging
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true

      - name: Comment on PR
        run: |
          PR_NUM=$(gh pr view --json number -q .number)
          gh pr comment $PR_NUM --repo $REPO --body "$msg"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          msg: |
            ## Deployed `Staging` ✅
            - ### [Notes App API (backend)](https://staging-notes-app.intrc.net/)
            - ### [Notes App UI (frontend)](https://staging-flower.intrc.net/)

            ### Verify deployment by:
            - #### Confirming the version in ArgoCD
            - #### Confirming `rev` label in EKS pods/deployments = PR number

            ## 📄 Checklist before merging to PROD
            - [ ] Verify deployment
            - [ ] Confirm Changes
            - [ ] Merge PR - to release changes to production.

            > [!IMPORTANT]
            > If there are changes that need to be made or merge conflicts you need to resolve, make the changes in feature branch, then merge branch to staging
              - Reason: The `staging` branch only allows changes that go thru the Merge Queue - hence need for new merge from feature branch
