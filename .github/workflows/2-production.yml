#  ┌────────────────────────────────────────────────────────────────────────────────────┐
#  │ Purpose:                                                                           │
#  │ - Triggers workflow for deploying release to PROD                                  │
#  │ - Sends a message on PR - to confirm deployment to user                            │
#  └────────────────────────────────────────────────────────────────────────────────────┘
name: 2 - Release Production

# Enforces main branch = prod env
on:
  workflow_dispatch: # manual run fallback
  push:
    branches:
      - main

# Permissions to write on PR
permissions: write-all

jobs:
  build:
    name: Build Release
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true

      # ┌────────────────────────────────────────────────────────────────────────────────────┐
      # │ Setup Deps                                                                         │
      # └────────────────────────────────────────────────────────────────────────────────────┘
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@master

      - name: Cache Devbox store
        uses: actions/cache@main
        with:
          path: ~/.cache/devbox
          key: devbox-${{ hashFiles('devbox.lock') }}
          restore-keys: |
            devbox-

      - name: Install Devbox
        uses: jetpack-io/devbox-install-action@main
        with:
          enable-cache: true

      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.PROD_DOPPLER_TOKEN }}
          inject-env-vars: true

      - name: Set versioning - via Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          ci: true

      - name: Confirm new release (fail-catch)
        if: steps.semantic.outputs.new_release_published == 'false'
        uses: actions/github-script@main
        with:
          script: |
            core.setFailed("Semantic version hasn't released a new version. See logs.")

      - name: Save Semantic Version in Doppler
        run: |
          doppler secrets set SEMANTIC_VERSION="${{ steps.semantic.outputs.new_release_version }}"
        env:
          DOPPLER_TOKEN: ${{ secrets.PROD_DOPPLER_TOKEN }}

      # ┌─────────────────────────────────────────────────────────────────────────────┐
      # │       Build/push images                                                     │
      # └─────────────────────────────────────────────────────────────────────────────┘
      - name: Backend - Build & Push image
        env:
          BUILD_ENV: prod
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/note-app-backend
          IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}
        run: |
          devbox run build_push
          echo '✅ Frontend image built and pushed'

      - name: Frontend - Build & Push image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/note-app-frontend
          IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }} # Since it was changed post-fetch
          REPO: ghcr.io/${{ github.repository }}
        run: |
          devbox run build_push
          echo '✅ Backend image built and pushed'

  deploy:
    name: Release Production
    needs: build
    environment: production
    runs-on: ubuntu-latest
    steps:
      # ┌─────────────────────────────────────────────────────────────────────────────┐
      # │       Setup deps                                                            │
      # └─────────────────────────────────────────────────────────────────────────────┘
      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.PROD_DOPPLER_TOKEN }}
          inject-env-vars: true

      - name: Checkout Helm Chart
        uses: actions/checkout@main
        with:
          repository: jomakori/gke_GitOps
          token: ${{ steps.doppler.outputs.GITOPS_GH_TOKEN }}

      - name: Cache Devbox store
        uses: actions/cache@main
        with:
          path: ~/.cache/devbox
          key: devbox-${{ hashFiles('devbox.lock') }}
          restore-keys: |
            devbox-

      - name: Install Devbox
        uses: jetpack-io/devbox-install-action@main
        with:
          enable-cache: true

      - name: Deploy Release
        env:
          CONTAINER_TAG: ${{ steps.doppler.outputs.SEMANTIC_VERSION }} # value refreshed in step
          ENV_NUM: 1 # production env
        run: |
          GIT_MESSAGE="release(notes-app): Upgraded PROD to: ${CONTAINER_TAG}"
          export GIT_MESSAGE
          devbox run deploy

  sync-staging:
    name: Sync Staging <-> Main
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true
          fetch-depth: 0 # to get all branches
          ref: main

      - name: Check - Active Release PRs
        uses: juliangruber/find-pull-request-action@v1
        id: find-prs
        with:
          branch: staging
          state: open

      - name: Sync - Staging <-> Main
        if: steps.find-prs.outputs.number == '' # if null - no active PRs
        uses: connor-baer/action-sync-branch@main
        with:
          branch: staging
          token: ${{ secrets.GITHUB_TOKEN }}
          force: true
